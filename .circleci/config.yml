version: 2.1

commands:
  destroy_environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:      
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-prod-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-prod-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-prod-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -k https://kvdb.io/DMcCNv176iSRE4g95XcETM/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            #exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
             #exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
            name: Front-end Test
            command: |
                cd frontend
                npm install
                npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
            name: Back-end Test
            command: |
                cd backend
                npm install
                npm run test
              
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
            name: Front-end Scan
            command: |
                cd frontend
                npm i
                npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
            name: Back-end Scan
            command: |
                cd backend
                npm install
                npm audit fix --audit-level=critical --force

  deploy-infrastructure-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-prod-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" 

      - run:
          name: Save backend URL and IP (for ansible)
          command: |
            echo [web] > .circleci/ansible/inventory.txt
            aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-prod-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].PublicIpAddress" --output text >> .circleci/ansible/inventory.txt 
            cat .circleci/ansible/inventory.txt                
      
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
    
  deploy-infrastructure-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-prod-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}"  

      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: SSH or Git CLI client 
          command: |
              apk add --update git openssh-client

      - add_ssh_keys:
          fingerprints: ["0c:27:1f:7c:b3:0f:42:3a:56:99:72:a4:79:b1:b4:94"] 

      - attach_workspace:
          at: .circleci/ansible

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh-client tar gzip curl

      - run:
          name: Install AWS-CLI
          command: |
            pip install awscli 

      - run:
          name: Configure server
          command: |
            echo $SSH_KEY
            echo "------ before ------"
            cat ~/.ssh/known_hosts
            cd .circleci/ansible
            cat inventory.txt
            ANSIBLE_HOST_KEY_CHECKING=0 ansible-playbook -i inventory.txt configure-server.yml
            echo "------ after ------"
            cat ~/.ssh/known_hosts

      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install            
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt

      - run:
          name: update certificates
          command: |
            sudo apt-get update && sudo apt-get install -y ca-certificates
            sudo update-ca-certificates -f -v


      - run:
          name: Send migration results to memstash
          command: |
            if [grep -q "has been executed successfully." backend/migrations_dump.txt] or [grep -q "No migrations are pending" backend/migrations_dump.txt]
            then
                echo "Migration Success"
                curl -k https://kvdb.io/DMcCNv176iSRE4g95XcETM/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
                echo "Migration Failed"
                curl -k https://kvdb.io/DMcCNv176iSRE4g95XcETM/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'              
            fi

      - revert-migrations
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"    

  
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update                       
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" 
            unzip awscliv2.zip 
            sudo ./aws/install

      - run:
          name: Install dependencies p2
          command: |
            cd frontend
            npm install

      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-prod-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      
      - revert-migrations
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"    
    
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints: ["0c:27:1f:7c:b3:0f:42:3a:56:99:72:a4:79:b1:b4:94"]

      - attach_workspace:
          at: .circleci/ansible
      
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm ansible zip
            pip install awscli
            cd backend
            npm install
      
      - run:
          name: Package Back-end
          command: |
            cd backend            
            npm run build            
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files

      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts


            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      
      - revert-migrations
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"    
    

  smoke-test:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install curl

      - attach_workspace:
          at: ~/

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(tail -1 ~/project/.circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "${API_URL}"
      
      - run:
          name: Backend smoke test.
          command: |
            curl ${API_URL}

      - run:
          name: Frontend smoke test.
          command: |
            export FRONTEND_IP="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            if curl -s ${FRONTEND_IP} | grep "Welcome"
            then
              echo "pass"
              exit 0
            else
              echo "fail"
              exit 1
            fi

      - revert-migrations
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"    
     

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo $OldWorkflowID > oldWorkflowId.txt
            aws cloudformation update-stack \
            --use-previous-template \
            --stack-name udapeoplestack \
            --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}

      - revert-migrations
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - run:
            name: install tar utilities
            command: |
              yum install -y tar gzip

        - attach_workspace:
            at: ~/

        - run:
            name: Get old stack workflow id
            command: |
              export OldWorkflowID=$(cat ~/project/oldWorkflowId.txt)
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo "$OldWorkflowID"
              echo "$STACKS"
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws s3 rb s3://udapeople-${OldWorkflowID} --force
                aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
                echo "Stacks deleted succesfully"
              fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure-backend:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [ master ]
      - deploy-infrastructure-frontend:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [ master ]
      - configure-infrastructure:
          requires: [deploy-infrastructure-backend]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      - deploy-backend:
          requires: [run-migrations, deploy-frontend]
          filters:
            branches:
              only: [master]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
          filters:
            branches:
              only: [master]
      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only: [master]
      - cleanup:
          requires: [cloudfront-update]
          filters:
            branches:
              only: [master]
