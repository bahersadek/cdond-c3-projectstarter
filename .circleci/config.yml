version: 2.1

commands:
  destroy_environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:      
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-prod-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-prod-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-prod-<<parameters.workflow_id>>


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            #exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
             #exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
            name: Front-end Test
            command: |
                cd frontend
                npm install
                npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
            name: Back-end Test
            command: |
                cd backend
                npm install
                npm run test
              
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
            name: Front-end Scan
            command: |
                cd backend
                npm install
                npm audit fix --force
                #npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
            name: Back-end Scan
            command: |
                cd backend
                npm install
                npm audit fix --force
                #npm audit --audit-level=critical

  deploy-infrastructure-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-prod-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" 

      - run:
          name: Save backend URL and IP (for ansible)
          command: |
            echo [web] > .circleci/ansible/inventory.txt
            aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-prod-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].PublicIpAddress" --output text >> .circleci/ansible/inventory.txt 
            cat .circleci/ansible/inventory.txt                
      
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
    
  deploy-infrastructure-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-prod-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}"  

      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: SSH or Git CLI client 
          command: |
              apk add --update git openssh-client

      - add_ssh_keys:
          fingerprints: ["0c:27:1f:7c:b3:0f:42:3a:56:99:72:a4:79:b1:b4:94"] 

      - attach_workspace:
          at: .circleci/ansible

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh-client tar gzip curl

      - run:
          name: Install AWS-CLI
          command: |
            pip install awscli 

      - run:
          name: Configure server
          command: |
            echo $SSH_KEY
            echo "------ before ------"
            cat ~/.ssh/known_hosts
            cd ~/project/.circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
            echo "------ after ------"
            cat ~/.ssh/known_hosts

      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure-backend:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [ master ]
      - deploy-infrastructure-frontend:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [ master ]
      - configure-infrastructure:
          requires: [deploy-infrastructure-backend]